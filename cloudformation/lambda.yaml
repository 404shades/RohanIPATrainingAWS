AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Lambda Function

Parameters:
  BucketName:
    Type: String
    Default: lambda-config-notification

Resources:
#  Source Bucket for adding event source notification with lambda
  LambdaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EventSourceLambda.Arn
#  Destination Bucket to copy the created objects from source
  DestinationBucket:
    Type: AWS::S3::Bucket
  FakeGeneratorBucket:
    Type: AWS::S3::Bucket
#  Lambda Function which will be triggered when a new object is inserted into source bucket
  EventSourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EventSourceLambda
      Runtime: python3.9
      Code: "../lambda/python_lambda"
      Role: !GetAtt EventSourceLambdaIamRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref DestinationBucket
      Handler: index.handler
#  Adding Lambda Layer to handle dependencies
  LambdaLayerPython:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
        - python3.8
      LayerName: PythonLambdaLayer
      Content: "../lambda_layer/"
      Description: Lambda layer containing dependencies for lambda functions
#      Lambda Function to generate fake data
  FakerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FakeDataGeneratorLambda
      Runtime: python3.9
      Code: "../lambda/faker_lambda"
      Role: !GetAtt EventSourceLambdaIamRole.Arn
      Timeout: 100
      Layers:
        - !Ref LambdaLayerPython
      Environment:
        Variables:
          BUCKET_NAME: !Ref FakeGeneratorBucket
      Handler: index.handler
  #  IAM Role to add permissions for copy and event source notification
  EventSourceLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambda_permission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:GetObjectTagging'
                Resource: !Sub "arn:aws:s3:::${BucketName}"
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:PutObjectTagging'
                Resource: !Sub "arn:aws:s3:::${DestinationBucket}"
              - Effect: Allow
                Action:
                  - 's3:Put*'
                Resource: !Sub "arn:aws:s3:::${FakeGeneratorBucket}"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
#  Adding Permission for Lambda to trigger when a new object is created in Source Bucket
  LambdaS3NotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EventSourceLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'

